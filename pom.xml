<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.hl</groupId>
	<artifactId>swagboot</artifactId>
	<packaging>jar</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>swagboot Maven Webapp</name>
	<url>http://maven.apache.org</url>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<fastjson.version>1.2.25</fastjson.version>
		<commons.lang.version>3.4</commons.lang.version>
		<bouncycastle.verson>1.46</bouncycastle.verson>
	</properties>

	<!-- spring boot 父节点依赖, 引入这个之后相关的引入就不需要添加version配置， spring boot会自动选择最合适的版本进行添加。 -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.5.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<dependencies>
		<!--加密相关 -->
		<dependency>
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcprov-jdk16</artifactId>
			<version>${bouncycastle.verson}</version>
		</dependency>
		<!-- spring boot web支持：mvc,aop... -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!--
		spring boot data-jpa,该jar中其实只有一个pom文件，在pom文件中
		依赖了spring-data-jpa和hibernate-entitymanager，所以只要引入
		这个jar就相当于引入了spring-data-jpa,和jpa具体实现hibernate
		 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!--用于监控springboot应用的健康状态组件-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- 能让Spring应用更加方便配置和访问Redis -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<!-- redis依赖commons-pool 这个依赖一定要添加 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
		</dependency>
		<!--<dependency>-->
			<!--<groupId>org.redisson</groupId>-->
			<!--<artifactId>redisson-spring-boot-starter</artifactId>-->
			<!--<version>3.11.2</version>-->
		<!--</dependency>-->
		<!--
               Spring Data REST是基于Spring Data的repository之上，可以把 repository
               自动输出为REST资源，目前支持Spring Data JPA、Spring Data MongoDB、
               Spring Data Neo4j、Spring Data GemFire、Spring Data Cassandra的
               repository 自动转换成REST服务。(相当于省略了service/Controller层代码)
               -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
			<scope>${jar.scope}</scope>
		</dependency>
		<!--
		 基于hal+json的media type的API浏览器，Spring Data Rest 提供了集成
		 可参考：https://www.jianshu.com/p/84f2bbffb885
		-->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-rest-hal-browser</artifactId>
			<scope>${jar.scope}</scope>
		</dependency>
		<!-- 集成spring security-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<!--
		thymeleaf和freemarker类似，都是模板，两者都是后端生成UI，需要解释器生成最终的html
		目前更流行后台只提供api，前端开发html app。基于vue，angularJs,react都可以。
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<!-- 用于把properties配置映射到Bean的工具，支持数组等,比原生@Value方式灵活-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

		<!--
		非常好用的通过注解省略get/set方法，
		开发时IDE需要下载对应支持插件，toString等常用方法的组件
		-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>compile</scope>
		</dependency>

		<!-- spring-boot-starter-test提供很多基础单元测试用法，更难得的是增加了对Controller层测试的支持 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- mysql 数据库驱动. -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>

		<!--swagger和swagger ui-->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.6.1</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.6.1</version>
		</dependency>

		<!--&lt;!&ndash; pom包里面添加spring-boot-starter-data-mongodb包引用 &ndash;&gt;-->
		<!--<dependency>-->
			<!--<groupId>org.springframework.boot</groupId>-->
			<!--<artifactId>spring-boot-starter-data-mongodb</artifactId>-->
		<!--</dependency>-->

		<!-- 以下都是一些常用的工具包 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>${fastjson.version}</version>
		</dependency>
		<!-- google josn工具 -->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.0</version>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons.lang.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>3.16</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpmime</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.9.3</version>
		</dependency>
		<!-- canal的客户端，用于处理binlog同步-->
		<dependency>
			<groupId>com.alibaba.otter</groupId>
			<artifactId>canal.client</artifactId>
			<version>1.1.1</version>
		</dependency>
		<!-- springboot集成kafka -->
		<!--
spring-kafka（它包装了apache的kafka-client）的依赖包版本是 1.0.6.RELEASE， 是因为我Linux服务器上部署的kafka服务器的版本是kafka_2.10-0.9.0.1，
使用的kafka的时候要注意，kafka客户端（kafka-client）的版本要和kafka服务器的版本一一对应，否则，消息会消费失败。
Spring官方网站上给出了SpringKafka和kafka-client版本（它的版本号要和kafka服务器的版本保持一致）的对应关系：https://projects.spring.io/spring-kafka/
		-->
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		<!--显示hibernate 完整sql和执行时间,加了之后会导致启动创建数据源对象报错,暂时注释-->
		<!--<dependency>-->
			<!--<groupId>com.googlecode.log4jdbc</groupId>-->
			<!--<artifactId>log4jdbc</artifactId>-->
			<!--<version>1.2</version>-->
		<!--</dependency>-->

		<!-- websocket支持 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>

	</dependencies>

	<profiles>
		<profile>
			<id>sit</id>
			<properties>
				<env>sit</env>
				<jar.scope>test</jar.scope>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile>
			<id>uat</id>
			<properties>
				<env>uat</env>
				<jar.scope>compile</jar.scope>
			</properties>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<env>prod</env>
				<!--生产环境屏蔽 SpringDataRest -->
				<jar.scope>test</jar.scope>
			</properties>
		</profile>
	</profiles>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<!-- 处理文件时需要对文件进行变量替换 -->
				<filtering>true</filtering>
				<excludes>
					<exclude>application-sit.properties</exclude>
					<exclude>application-uat.properties</exclude>
					<exclude>application-prod.properties</exclude>
					<exclude>application.properties</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<!-- 处理文件时需要对文件进行变量替换 -->
				<filtering>true</filtering>
				<!--指定包含以下文件，${profileActive}会根据指定profile动态替换-->
				<includes>
					<include>application-${env}.properties</include>
					<include>application.properties</include>
				</includes>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<encoding>utf-8</encoding>
					<useDefaultDelimiters>true</useDefaultDelimiters>
				</configuration>
			</plugin>
			<!-- Package as an executable jar，用于maven将spirng boot项目打成可运行的fat jar -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<executable>true</executable>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
